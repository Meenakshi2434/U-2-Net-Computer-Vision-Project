{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1rzNv4wpG6WAckB45IyHmgheR606lXjVE","authorship_tag":"ABX9TyNr7ZJQFLp8K+LVfd3QRMqz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9q0h5DY_ywIc","executionInfo":{"status":"ok","timestamp":1723799211727,"user_tz":240,"elapsed":7640,"user":{"displayName":"Meenakshi Jangra","userId":"05958568856643630195"}},"outputId":"3a6fd834-9333-4136-dcfc-f4fd902dbc81"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1, Iter 1, Loss: 0.6741799116134644\n","Epoch 1, Iter 2, Loss: 0.6703338623046875\n","Epoch 1, Iter 3, Loss: 0.6635014414787292\n","Epoch 1, Iter 4, Loss: 0.6520228385925293\n","Epoch 1, Val Dice Score: 0.1356, Val IoU: 0.0727\n","Epoch 2, Iter 1, Loss: 0.6493246555328369\n","Epoch 2, Iter 2, Loss: 0.642970860004425\n","Epoch 2, Iter 3, Loss: 0.5911780595779419\n","Epoch 2, Iter 4, Loss: 0.6539306640625\n","Epoch 2, Val Dice Score: 0.0125, Val IoU: 0.0063\n","Epoch 3, Iter 1, Loss: 0.6208704710006714\n","Epoch 3, Iter 2, Loss: 0.6278217434883118\n","Epoch 3, Iter 3, Loss: 0.5663912892341614\n","Epoch 3, Iter 4, Loss: 0.6187052726745605\n","Epoch 3, Val Dice Score: 0.0078, Val IoU: 0.0039\n","Epoch 4, Iter 1, Loss: 0.6030674576759338\n","Epoch 4, Iter 2, Loss: 0.5736150145530701\n","Epoch 4, Iter 3, Loss: 0.5799689888954163\n","Epoch 4, Iter 4, Loss: 0.6393486261367798\n","Epoch 4, Val Dice Score: 0.0179, Val IoU: 0.0090\n","Epoch 5, Iter 1, Loss: 0.6653112769126892\n","Epoch 5, Iter 2, Loss: 0.5671191811561584\n","Epoch 5, Iter 3, Loss: 0.5806654095649719\n","Epoch 5, Iter 4, Loss: 0.5540001392364502\n","Epoch 5, Val Dice Score: 0.0050, Val IoU: 0.0025\n","Epoch 6, Iter 1, Loss: 0.618095874786377\n","Epoch 6, Iter 2, Loss: 0.5888149738311768\n","Epoch 6, Iter 3, Loss: 0.575564444065094\n","Epoch 6, Iter 4, Loss: 0.516947329044342\n","Epoch 6, Val Dice Score: 0.0081, Val IoU: 0.0041\n","Epoch 7, Iter 1, Loss: 0.5907366871833801\n","Epoch 7, Iter 2, Loss: 0.6450893878936768\n","Epoch 7, Iter 3, Loss: 0.5529769659042358\n","Epoch 7, Iter 4, Loss: 0.5069778561592102\n","Epoch 7, Val Dice Score: 0.0149, Val IoU: 0.0075\n","Epoch 8, Iter 1, Loss: 0.5694085955619812\n","Epoch 8, Iter 2, Loss: 0.6044968366622925\n","Epoch 8, Iter 3, Loss: 0.5996376872062683\n","Epoch 8, Iter 4, Loss: 0.4962725043296814\n","Epoch 8, Val Dice Score: 0.0203, Val IoU: 0.0103\n","Epoch 9, Iter 1, Loss: 0.5019795894622803\n","Epoch 9, Iter 2, Loss: 0.6221699118614197\n","Epoch 9, Iter 3, Loss: 0.6080300807952881\n","Epoch 9, Iter 4, Loss: 0.5466094017028809\n","Epoch 9, Val Dice Score: 0.0148, Val IoU: 0.0074\n","Epoch 10, Iter 1, Loss: 0.5607612729072571\n","Epoch 10, Iter 2, Loss: 0.5844511389732361\n","Epoch 10, Iter 3, Loss: 0.6010597944259644\n","Epoch 10, Iter 4, Loss: 0.500079333782196\n","Epoch 10, Val Dice Score: 0.0137, Val IoU: 0.0069\n"]}],"source":["import os\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","from torchvision import transforms\n","from PIL import Image\n","\n","# Set the dataset path\n","image_dir = '/content/drive/MyDrive/Image'\n","mask_dir = '/content/drive/MyDrive/Mask'\n","\n","# Define the data augmentation and preprocessing\n","image_transform = transforms.Compose([\n","    transforms.Resize((320, 320)),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomVerticalFlip(),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","])\n","\n","mask_transform = transforms.Compose([\n","    transforms.Resize((320, 320)),\n","    transforms.RandomHorizontalFlip(),\n","    transforms.RandomVerticalFlip(),\n","    transforms.ToTensor()\n","    # Removed normalization for masks\n","])\n","# Update the dataset class to use different transforms for images and masks\n","class CarDataset(Dataset):\n","    def __init__(self, image_paths, mask_paths, image_transform, mask_transform):\n","        self.image_paths = image_paths\n","        self.mask_paths = mask_paths\n","        self.image_transform = image_transform\n","        self.mask_transform = mask_transform\n","\n","    def __len__(self):\n","        return len(self.image_paths)\n","\n","    def __getitem__(self, idx):\n","        image = Image.open(self.image_paths[idx])\n","        mask = Image.open(self.mask_paths[idx])\n","        image = self.image_transform(image)\n","        mask = self.mask_transform(mask) # Use mask_transform for masks\n","        mask = mask.unsqueeze(0)\n","        return image, mask\n","\n","# Load the dataset\n","image_files = [os.path.join(image_dir, f) for f in os.listdir(image_dir)]\n","mask_files = [os.path.join(mask_dir, f) for f in os.listdir(mask_dir)]\n","\n","# Import the necessary library\n","from sklearn.model_selection import train_test_split\n","\n","# Split the dataset into training and validation sets\n","train_image_files, val_image_files, train_mask_files, val_mask_files = train_test_split(image_files, mask_files, test_size=0.25, random_state=42)\n","\n","# Create the dataset and data loader using the updated transforms\n","train_dataset = CarDataset(train_image_files, train_mask_files, image_transform, mask_transform)\n","val_dataset = CarDataset(val_image_files, val_mask_files, image_transform, mask_transform)\n","train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True)\n","val_loader = DataLoader(val_dataset, batch_size=4, shuffle=False)\n","\n","# Set the device (GPU or CPU)\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Define the U-2-Net model\n","class U2Net(nn.Module):\n","    def __init__(self):\n","        super(U2Net, self).__init__()\n","        self.encoder = nn.Sequential(\n","            nn.Conv2d(3, 64, kernel_size=3, padding=1), # Add padding to maintain spatial dimensions\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2),\n","            nn.Conv2d(64, 128, kernel_size=3, padding=1), # Add padding\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2),\n","            nn.Conv2d(128, 256, kernel_size=3, padding=1), # Add padding\n","            nn.ReLU(),\n","            nn.MaxPool2d(kernel_size=2)\n","        )\n","        self.decoder = nn.Sequential(\n","            nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2),\n","            nn.ReLU(),\n","            nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2),\n","            nn.ReLU(),\n","            nn.ConvTranspose2d(64, 1, kernel_size=2, stride=2),\n","            nn.Conv2d(1, 1, kernel_size=3, padding=1) # Add a final convolutional layer to adjust output size\n","        )\n","\n","    def forward(self, x):\n","        x = self.encoder(x)\n","        x = self.decoder(x)\n","        return x\n","\n","# Define the loss function\n","\n","def dice_coeff(output, target):\n","    smooth = 1\n","    output = output.view(-1)\n","    target = target.view(-1)\n","    intersection = (output * target).sum()\n","    union = output.sum() + target.sum()\n","    dice = (2 * intersection + smooth) / (union + smooth)\n","    return dice\n","\n","def iou_coeff(output, target):\n","    output = output.view(-1)\n","    target = target.view(-1)\n","    intersection = (output * target).sum()\n","    union = output.sum() + target.sum() - intersection\n","    iou = intersection / union\n","    return iou\n","\n","# Set the device (GPU or CPU)\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Initialize the model, optimizer, and loss function\n","model = U2Net()\n","model.to(device)\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","criterion = nn.BCEWithLogitsLoss()\n","\n","# Train the model\n","for epoch in range(10):\n","    model.train()\n","    for i, (image, mask) in enumerate(train_loader):\n","        image = image.to(device)\n","        mask = mask.to(device)\n","        output = model(image)\n","        loss = criterion(output, mask[:, 0, :, :])\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        print(f'Epoch {epoch+1}, Iter {i+1}, Loss: {loss.item()}')\n","    model.eval()\n","    with torch.no_grad():\n","        dice_score = 0\n","        iou = 0\n","        for i, (image, mask) in enumerate(val_loader):\n","            image = image.to(device)\n","            mask = mask.to(device)\n","            output = model(image)\n","            output = torch.sigmoid(output)\n","            output = output > 0.5\n","            dice_score += dice_coeff(output, mask[:, 0, :, :])\n","            iou += iou_coeff(output, mask[:, 0, :, :])\n","        dice_score /= len(val_loader)\n","        iou /= len(val_loader)\n","        print(f'Epoch {epoch+1}, Val Dice Score: {dice_score:.4f}, Val IoU: {iou:.4f}')\n","\n","# Save the trained model\n","torch.save(model.state_dict(), 'u2net.pth')"]},{"cell_type":"markdown","source":["Task 2\n"],"metadata":{"id":"cAFCXvkA65Y5"}}]}